export const codeLines = [
  'from fastapi import FastAPI, HTTPException',
  'from sqlalchemy.orm import Session',
  'from typing import Dict, Any, Optional',
  'import stripe',
  'import logging',
  '',
  'logger = logging.getLogger(__name__)',
  '',
  'class PaymentService:',
  '    """Handle all payment operations through Stripe"""',
  '    ',
  '    def __init__(self, db: Session):',
  '        self.db = db',
  '        self.stripe = stripe',
  '        self.stripe.api_key = os.environ.get("STRIPE_SECRET_KEY")',
  '        ',
  '    async def process_payment(',
  '        self, ',
  '        amount: float, ',
  '        currency: str = "usd",',
  '        metadata: Optional[Dict[str, Any]] = None',
  '    ) -> Dict[str, Any]:',
  '        """',
  '        Process payment through Stripe API',
  '        ',
  '        Args:',
  '            amount: Payment amount in base currency units',
  '            currency: Three-letter ISO currency code',
  '            metadata: Additional payment metadata',
  '            ',
  '        Returns:',
  '            Dict containing client_secret and payment_intent_id',
  '        """',
  '        try:',
  '            # Create payment intent with idempotency key',
  '            intent = await self.stripe.PaymentIntent.create(',
  '                amount=int(amount * 100),',
  '                currency=currency.lower(),',
  '                automatic_payment_methods={"enabled": True},',
  '                metadata=metadata or {},',
  '                idempotency_key=self._generate_idempotency_key()',
  '            )',
  '            ',
  '            # Log successful intent creation',
  '            logger.info(f"Payment intent created: {intent.id}")',
  '            ',
  '            # Store payment record in database',
  '            payment_record = PaymentRecord(',
  '                intent_id=intent.id,',
  '                amount=amount,',
  '                currency=currency,',
  '                status="pending",',
  '                created_at=datetime.utcnow()',
  '            )',
  '            self.db.add(payment_record)',
  '            await self.db.commit()',
  '            ',
  '            return {',
  '                "client_secret": intent.client_secret,',
  '                "payment_intent_id": intent.id,',
  '                "amount": amount,',
  '                "currency": currency',
  '            }',
  '            ',
  '        except stripe.error.StripeError as e:',
  '            logger.error(f"Stripe error: {str(e)}")',
  '            raise HTTPException(',
  '                status_code=400, ',
  '                detail=f"Payment processing failed: {str(e)}"',
  '            )',
  '        except Exception as e:',
  '            logger.error(f"Unexpected error: {str(e)}")',
  '            await self.db.rollback()',
  '            raise HTTPException(',
  '                status_code=500,',
  '                detail="Internal server error"',
  '            )',
];